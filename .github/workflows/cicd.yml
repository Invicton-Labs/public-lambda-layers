name: "CICD"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      # Checkout this repository
      - name: "Checkout ${{ github.ref }}@${{ github.sha }}"
        uses: actions/checkout@v2

      # Make the tmpfiles directory
      - name: Create tmpfiles directory
        working-directory: terraform
        run: mkdir tmpfiles

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      # Ensure the Terraform config is properly formatted
      - name: Terraform Format
        id: fmt
        working-directory: terraform
        run: terraform fmt -check -recursive
        continue-on-error: true

      # Initialize Terraform
      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform inits -backend-config="bucket=${{ secrets.BACKEND_BUCKET_ID }}" -backend-config="key=${{ secrets.BACKEND_BUCKET_KEY }}" -backend-config="role_arn=${{ secrets.BACKEND_ROLE_ARN }}"
        continue-on-error: true

      # Run the plan, and continue on error so we can output the plan error if it fails
      - name: Terraform Plan
        id: plan
        # Only run the plan if it's a PR and the init succeeded
        if: github.event_name == 'pull_request' && steps.init.outputs.exitcode == 0
        working-directory: terraform
        run: terraform plan -refresh=false -no-color -detailed-exitcode -out=tmpfiles/tfplan
        continue-on-error: true

      # Read the plan file. This allows us to get the plan without also seeing all of the "refreshing..." lines
      - name: Read Plan
        id: read-plan
        if: github.event_name == 'pull_request' && steps.plan.outputs.exitcode == 0
        working-directory: terraform
        run: terraform show tmpfiles/tfplan

      # If it's a PR, update the PR with the plan output
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var plan_status = "not attempted", output_details = "";
            if (${{ steps.fmt.outputs.exitcode }} != 0) { output_details += "<details><summary>Show Improperly Formatted Files</summary>\`\`\`\n${{ steps.fmt.outputs.stderr }}\n\`\`\`"; }
            if ("${{ steps.plan.outputs.exitcode }}" != "") {
              switch (${{ steps.plan.outputs.exitcode }}) {
                case 0:
                  plan_status = "success"; output_details += "\n\n**No changes required.**"; break;
                case 1:
                  plan_status = "failure";
                  output_details = `\n\n<details><summary>Show Plan Errors</summary>
                      \`\`\`terraform\n
                      ${{ steps.plan.outputs.stderr }}
                      \`\`\`
                    </details>`; break;
                case 2:
                  plan_status = "success"; output_details += `\n\n<details><summary>Show Plan</summary>
                      \`\`\`terraform\n
                      ${{ steps.read-plan.outputs.stdout }}
                      \`\`\`
                    </details>`; break;
              }
            }
            var output = `**Pusher:** @${{ github.actor }}
            **Action:** \`${{ github.event_name }}\`
            **Workflow Run:** [#${{ github.run_id }}-${{ github.run_attempt }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})
            #### 🖌 Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
            #### ⚙️ Terraform Initialization: \`${{ steps.init.outcome }}\`
            #### 📖 Terraform Plan: \`` + plan_status + `\`\n\n` + output_details;
            github.issues.createComment({issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: output })
      
      
      # If the plan failed, fail the workflow
      - name: Terraform Format Failure
        if: steps.fmt.outputs.exitcode != 0
        working-directory: terraform
        run: exit 1

      # If the plan failed, fail the workflow
      - name: Terraform Plan Failure
        if: steps.plan.outputs.exitcode == 1
        working-directory: terraform
        run: exit 1

      # Run the apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.outputs.exitcode == 2
        working-directory: terraform
        run: terraform apply -auto-approve 

      # Prettify the JSON output
      - name: Create Layer JSON Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.outputs.exitcode == 2
        working-directory: terraform
        run: jq . tmpfiles/layers.json > ../layers.json
  
      # Publish the new layers.json file
      - name: Commit Layer JSON file
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.plan.outputs.exitcode == 2
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'kotowick@invictonlabs.com'
          git add layers.json
          git commit -m "Publish new layers.json file [skip ci]"
          git push
