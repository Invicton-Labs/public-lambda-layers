on:
  push:
    branches:
      - main
  pull_request:

# Always limit to a single concurrency to ensure that all plans/applys have the most recent state
concurrency: 
  group: single-concurrency

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      # Checkout this repository
      - name: "Checkout ${{ github.ref }}@${{ github.sha }}"
        uses: actions/checkout@v2

      # Make the tmpfiles directory
      - name: Create tmpfiles directory
        working-directory: terraform
        run: mkdir tmpfiles

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1

      # Ensure the Terraform config is properly formatted
      - name: Terraform Format
        id: fmt
        working-directory: terraform
        run: terraform fmt -check -recursive
        continue-on-error: true

      # Initialize Terraform
      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform init -backend-config="bucket=${{ secrets.BACKEND_BUCKET_ID }}" -backend-config="key=${{ secrets.BACKEND_BUCKET_KEY }}" -backend-config="role_arn=${{ secrets.BACKEND_ROLE_ARN }}"
        continue-on-error: true

      # Run the plan, and continue on error so we can output the plan error if it fails
      - name: Terraform Plan
        id: plan
        # Only run the plan if it's a PR and the init succeeded
        if: github.event_name == 'pull_request' && steps.init.outcome == 'success'
        working-directory: terraform
        # Use a detailed exit code for issue comments
        run: terraform plan -no-color -detailed-exitcode -out=tmpfiles/tfplan
        continue-on-error: true

      # Read the plan file. This allows us to get the plan without also seeing all of the "refreshing..." lines
      - name: Read Plan
        id: read-plan
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
        working-directory: terraform
        run: terraform show -no-color tmpfiles/tfplan

      - name: Outputs
        run: |
          echo "fmt outcome: ${{ steps.fmt.outcome }}"
          echo "fmt stdout: ${{ steps.fmt.outputs.stdout }}"
          echo "fmt stderr: ${{ steps.fmt.outputs.stderr }}"
          echo "fmt exitcode: ${{ steps.fmt.outputs.exitcode }}"
          echo "init outcome: ${{ steps.init.outcome }}"
          echo "init stdout: ${{ steps.init.outputs.stdout }}"
          echo "init stderr: ${{ steps.init.outputs.stderr }}"
          echo "init exitcode: ${{ steps.init.outputs.exitcode }}"
          echo "plan outcome: ${{ steps.plan.outcome }}"
          echo "plan stdout: ${{ steps.plan.outputs.stdout }}"
          echo "plan stderr: ${{ steps.plan.outputs.stderr }}"
          echo "plan exitcode: ${{ steps.plan.outputs.exitcode }}"
          echo "read-plan outcome: ${{ steps.read-plan.outcome }}"
          echo "read-plan stdout: ${{ steps.read-plan.outputs.stdout }}"
          echo "read-plan stderr: ${{ steps.read-plan.outputs.stderr }}"
          echo "read-plan exitcode: ${{ steps.read-plan.outputs.exitcode }}"

      # If it's a PR, update the PR with the plan output
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var plan_status = "skipped", output_details = "";
            if ("${{ steps.fmt.outcome }}" == "failure") { output_details += `<details><summary>Show Improperly Formatted Files</summary>\n\n\`\`\`\n${{ steps.fmt.outputs.stdout }}\`\`\`\n</details>`; }
            if ("${{ steps.plan.outcome }}" != "skipped") {
              switch ("${{ steps.plan.outputs.exitcode }}") {
                case "0":
                  plan_status = "success"; output_details += `\n\n**No changes required.**`; break;
                case "1":
                  plan_status = "failure";
                  output_details += `\n\n<details><summary>Show Plan Errors</summary>\n\n\`\`\`terraform\n${{ steps.plan.outputs.stderr }}\n\`\`\`\n</details>`; break;
                case "2":
                  plan_status = "success"; 
                  output_details += `\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${{ steps.read-plan.outputs.stdout }}\n\`\`\`\n</details>`; break;
                default:
                  throw "Unknown terraform plan status code: ${{ steps.plan.outputs.exitcode }}"
              }
            }
            var output = `**Author:** @${{ github.actor }}
            **Workflow Run:** [#${{ github.run_id }}-${{ github.run_attempt }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }})
            | Task | Result |
            | ---- | ------ |
            | 🖌 **Terraform Format** | ` + ("${{ steps.fmt.outcome }}" == "failure" ? "❌" : ("${{ steps.fmt.outcome }}" == "skipped" ? "⏭" : "✅")) + `\`${{ steps.fmt.outcome }}\` |
            | ⚙️ **Terraform Initialization** | ` + ("${{ steps.init.outcome }}" == "failure" ? "❌" : ("${{ steps.init.outcome }}" == "skipped" ? "⏭" : "✅")) + `\`${{ steps.init.outcome }}\` |
            | 📖 **Terraform Plan** | ` + (plan_status == "failure" ? "❌" : (plan_status == "skipped" ? "⏭" : "✅")) + `\`` + plan_status + `\` |\n\n` + output_details;
            github.issues.createComment({issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: output })
      
      
      # If the plan failed, fail the workflow
      - name: Terraform Format Failure
        if: steps.fmt.outputs.exitcode != 0
        working-directory: terraform
        run: exit 1

      # If the plan failed, fail the workflow
      - name: Terraform Plan Failure
        if: steps.plan.outputs.exitcode == 1
        working-directory: terraform
        run: exit 1

      # Run the apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: terraform
        run: terraform apply -auto-approve 

      # Prettify the JSON output
      - name: Create Layer JSON Output
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: terraform
        run: jq . tmpfiles/layers.json > ../layers.json
  
      # Publish the new layers.json file
      - name: Commit Layer JSON file
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'kotowick@invictonlabs.com'
          git add layers.json
          git commit -m "Publish new layers.json file [skip ci]"
          git push
